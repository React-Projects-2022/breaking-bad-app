{"version":3,"file":"static/js/444.ed85c686.chunk.js","mappings":"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","sources":["components/CharacterItemLoading.js","components/Loading.js","components/PageTitle.js","configs/chartjs.js","components/BarChart.js","components/Button.js","graphql/operations/mutation.js","graphql/operations/query.js","graphql/operations/subscription.js","pages/PrincipalCharsVotes.js","../node_modules/@apollo/src/react/hooks/useMutation.ts","../node_modules/@apollo/src/react/hooks/useSubscription.ts"],"sourcesContent":["import ContentLoader from \"react-content-loader\";\nimport PropTypes from \"prop-types\";\n\n/**\n * Loading component for CharacterItem\n *\n * @param {*} props\n * @returns\n */\nconst CharacterItemLoading = (props) => (\n  <ContentLoader\n    speed={2}\n    width={350}\n    height={330}\n    viewBox=\"0 0 350 330\"\n    backgroundColor=\"#f3f3f3\"\n    foregroundColor=\"#ecebeb\"\n    {...props}\n  >\n    <rect x=\"7\" y=\"7\" rx=\"5\" ry=\"5\" width=\"332\" height=\"227\" />\n    <rect x=\"11\" y=\"243\" rx=\"3\" ry=\"3\" width=\"139\" height=\"14\" />\n    <rect x=\"11\" y=\"268\" rx=\"3\" ry=\"3\" width=\"242\" height=\"11\" />\n    <rect x=\"11\" y=\"291\" rx=\"3\" ry=\"3\" width=\"87\" height=\"31\" />\n  </ContentLoader>\n);\n\nCharacterItemLoading.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n};\n\nexport default CharacterItemLoading;\n","import { Ring } from \"react-awesome-spinners\";\n\nconst Loading = () => (\n  <span className=\"loading\">\n    <Ring size={454} />\n  </span>\n);\n\nexport default Loading;\n","const PageTitle = ({ title }) => (\n  <>\n    <h2>{title}</h2>\n    <hr />\n  </>\n);\n\nexport default PageTitle;\n","import {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend,\n  } from \"chart.js\";\n  \n  ChartJS.register(\n    CategoryScale,\n    LinearScale,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend\n  );\n\n  export default ChartJS;","import { Bar } from \"react-chartjs-2\";\n// Configuración de los elemmentos como tooltip. labels,...que usaremos en las gráficas\n// eslint-disable-next-line no-unused-vars\nimport ChartJS from \"./../configs/chartjs\";\n\nconst BarChart = ({ titleChart, labels, dataValues }) => {\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: \"top\",\n      },\n      title: {\n        display: true,\n        text: titleChart,\n      },\n    },\n  };\n\n  const data = {\n    labels,\n    datasets: [\n      {\n        label: \"Characters\",\n        data: dataValues,\n        backgroundColor: \"rgba(13, 202, 240, 1)\",\n      },\n    ],\n  };\n  return <Bar options={options} data={data} />;\n};\n\nexport default BarChart;\n","import \"./../styles/components.css\";\nimport PropTypes from \"prop-types\";\n\nconst Button = ({\n  label,\n  param,\n  action,\n  btnClass = \"btn btn-info btn-lg btn-block custom-button\",\n}) => {\n  return (\n    <>\n      <button className={btnClass} onClick={() => action(param)}>\n        {label}\n      </button>\n    </>\n  );\n};\n\n// Para obligar pasar el argumento para el objeto\nButton.propTypes = {\n  label: PropTypes.string.isRequired,\n};\n\nexport default Button;\n","import { gql } from \"@apollo/client\";\n\nexport const ADD_VOTE = gql`\n  mutation Mutation($character: ID!) {\n    addVote(character: $character) {\n      status\n      message\n    }\n  }\n`;\n","import { gql } from \"@apollo/client\";\n\nexport const PRINCIPAL_CHARACTERS_VOTES = gql`\n  query PrincipalCharsVotes {\n    characters {\n      id\n      name\n      description\n      portrayed: actor\n      total_episodes\n      votes\n      url\n      img: photo\n    }\n  }\n`;\n\nexport const GET_CHARACTER = gql`\n  query detailsCharacter($id: ID!){\n    character(id: $id) {\n      id\n      total_episodes\n      votes\n      name\n      actor\n      description\n      photo\n      url\n    }\n  }\n`;\n","import { gql } from \"@apollo/client\";\n\nexport const CHANGE_VOTES_LISTENER = gql`\n  subscription {\n    changeVotes {\n      id\n      name\n      votes\n    }\n  }\n`;\n\n\nexport const CHANGE_VOTE_LISTENER = gql`\n    subscription characterVoteCount($id: ID!) {\n        changeVote(id: $id) {\n            id\n            name\n            votes\n        }\n    }\n`;","import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useSubscription } from \"@apollo/client\";\n\nimport { Loading, BarChart, Button, PageTitle } from \"../components/\";\n// GraphQL Operations\nimport { PRINCIPAL_CHARACTERS_VOTES } from \"../graphql/operations/query\";\nimport { CHANGE_VOTES_LISTENER } from \"../graphql/operations/subscription\";\nimport { ADD_VOTE } from \"../graphql/operations/mutation\";\nimport { NavLink } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nconst PrincipalCharsVotes = () => {\n  const { t } = useTranslation(\"votes\");\n  const [characters, setCharacters] = useState([]);\n  const { loading, error, data: votes } = useQuery(PRINCIPAL_CHARACTERS_VOTES);\n  const [addVote] = useMutation(ADD_VOTE, {\n    update: (__, mutationResult) => {\n      console.log(mutationResult.data);\n    },\n  });\n  useSubscription(CHANGE_VOTES_LISTENER); //executes query\n\n  useEffect(() => {\n    if (votes) {\n      setCharacters(votes.characters);\n    }\n  }, [votes]);\n\n  if (loading) return <Loading />;\n  if (error) return <p>Error :(</p>;\n\n  let labels = [];\n  let values = [];\n  if (!loading) {\n    characters.map((character) => {\n      labels.push(character[\"name\"]);\n      values.push(character[\"votes\"]);\n      return \"\";\n    });\n  }\n\n  const voteCharacter = (characterId) =>\n    addVote({\n      variables: {\n        character: characterId,\n      },\n    });\n\n  //const showDetails = (characterId) => navigateTo(\"details\", characterId);\n\n  const tableValues = [\n    `name`,\n    `actor`,\n    `info`,\n    `total_episodes`,\n    `votes`,\n    `details`,\n  ];\n\n  return (\n    <>\n      <PageTitle title={t(\"title\")} />\n      {!loading && (\n        <>\n          <div className=\"row\">\n            <div className=\"col-9\">\n              <BarChart\n                titleChart={t(\"vote_count_for_chart\")}\n                labels={labels}\n                dataValues={values}\n              />\n            </div>\n            <div className=\"col d-grid gap-2\">\n              {characters.map((character) => (\n                <Button\n                  key={character.id}\n                  label={character.name}\n                  param={character.id}\n                  action={voteCharacter}\n                />\n              ))}\n            </div>\n          </div>\n          <br />\n          <br />\n          <div className=\"row\">\n            <div className=\"table-responsive\">\n              <table className=\"table\">\n                <thead>\n                  <tr>\n                    {tableValues.map((values, index) => (\n                      <th className=\"text-center\" key={index}>\n                        {t(values)}\n                      </th>\n                    ))}\n                  </tr>\n                </thead>\n\n                <tbody>\n                  {characters.map((character) => (\n                    <tr key={character.id}>\n                      <td>{character[\"name\"]}</td>\n                      <td>{character[\"portrayed\"]}</td>\n                      <td>\n                        <a\n                          href={character[\"url\"]}\n                          target=\"_blank\"\n                          rel=\"noreferrer\"\n                        >\n                          Wikipedia\n                        </a>\n                      </td>\n                      <td>{character[\"total_episodes\"]}</td>\n                      <td>{character[\"votes\"]}</td>\n                      <td>\n                        <NavLink\n                          to={`/breaking-bad-app/details/${character.id}`}\n                          className=\"btn btn-info btn-lg btn-block custom-button\"\n                        >\n                          {t(`details`)}\n                        </NavLink>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default PrincipalCharsVotes;\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport {\n  MutationFunctionOptions,\n  MutationHookOptions,\n  MutationResult,\n  MutationTuple,\n} from '../types/types';\n\nimport {\n  ApolloCache,\n  DefaultContext,\n  mergeOptions,\n  OperationVariables,\n} from '../../core';\nimport { equal } from '@wry/equality';\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { ApolloError } from '../../errors';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<TData, TVariables, TContext>,\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n  const [result, setResult] = useState<Omit<MutationResult, 'reset'>>({\n    called: false,\n    loading: false,\n    client,\n  });\n\n  const ref = useRef({\n    result,\n    mutationId: 0,\n    isMounted: true,\n    client,\n    mutation,\n    options,\n  });\n\n  // TODO: Trying to assign these in a useEffect or useLayoutEffect breaks\n  // higher-order components.\n  {\n    Object.assign(ref.current, { client, options, mutation });\n  }\n\n  const execute = useCallback((\n    executeOptions: MutationFunctionOptions<\n      TData,\n      TVariables,\n      TContext,\n      TCache\n    > = {}\n  ) => {\n    const {client, options, mutation} = ref.current;\n    const baseOptions = { ...options, mutation };\n    if (!ref.current.result.loading && !baseOptions.ignoreResults) {\n      setResult(ref.current.result = {\n        loading: true,\n        error: void 0,\n        data: void 0,\n        called: true,\n        client,\n      });\n    }\n\n    const mutationId = ++ref.current.mutationId;\n    const clientOptions = mergeOptions(\n      baseOptions,\n      executeOptions as any,\n    );\n\n    return client.mutate(clientOptions).then((response) => {\n      const { data, errors } = response;\n      const error =\n        errors && errors.length > 0\n          ? new ApolloError({ graphQLErrors: errors })\n          : void 0;\n\n      if (\n        mutationId === ref.current.mutationId &&\n        !clientOptions.ignoreResults\n      ) {\n        const result = {\n          called: true,\n          loading: false,\n          data,\n          error,\n          client,\n        };\n\n        if (ref.current.isMounted && !equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n\n      baseOptions.onCompleted?.(response.data!);\n      executeOptions.onCompleted?.(response.data!);\n      return response;\n    }).catch((error) => {\n      if (\n        mutationId === ref.current.mutationId &&\n        ref.current.isMounted\n      ) {\n        const result = {\n          loading: false,\n          error,\n          data: void 0,\n          called: true,\n          client,\n        };\n\n        if (!equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n\n      if (baseOptions.onError || clientOptions.onError) {\n        baseOptions.onError?.(error);\n        executeOptions.onError?.(error);\n        // TODO(brian): why are we returning this here???\n        return { data: void 0, errors: error };\n      }\n\n      throw error;\n    });\n  }, []);\n\n  const reset = useCallback(() => {\n    setResult({ called: false, loading: false, client });\n  }, []);\n\n  useEffect(() => () => {\n    ref.current.isMounted = false;\n  }, []);\n\n  return [execute, { reset, ...result }];\n}\n","import '../../utilities/globals';\nimport { useState, useRef, useEffect } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport { equal } from '@wry/equality';\n\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport {\n  SubscriptionHookOptions,\n  SubscriptionResult\n} from '../types/types';\nimport { OperationVariables } from '../../core';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useSubscription<TData = any, TVariables = OperationVariables>(\n  subscription: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: SubscriptionHookOptions<TData, TVariables>,\n) {\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(subscription, DocumentType.Subscription);\n  const [result, setResult] = useState<SubscriptionResult<TData>>({\n    loading: !options?.skip,\n    error: void 0,\n    data: void 0,\n    variables: options?.variables,\n  });\n\n  const [observable, setObservable] = useState(() => {\n    if (options?.skip) {\n      return null;\n    }\n\n    return client.subscribe({\n      query: subscription,\n      variables: options?.variables,\n      fetchPolicy: options?.fetchPolicy,\n      context: options?.context,\n    });\n  });\n\n  const ref = useRef({ client, subscription, options });\n  useEffect(() => {\n    let shouldResubscribe = options?.shouldResubscribe;\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(options!);\n    }\n\n    if (options?.skip && !options?.skip !== !ref.current.options?.skip) {\n      setResult({\n        loading: false,\n        data: void 0,\n        error: void 0,\n        variables: options?.variables,\n      });\n      setObservable(null);\n    } else if (\n      shouldResubscribe !== false && (\n        client !== ref.current.client ||\n        subscription !== ref.current.subscription ||\n        options?.fetchPolicy !== ref.current.options?.fetchPolicy ||\n        !options?.skip !== !ref.current.options?.skip ||\n        !equal(options?.variables, ref.current.options?.variables)\n      )\n    ) {\n      setResult({\n        loading: true,\n        data: void 0,\n        error: void 0,\n        variables: options?.variables,\n      });\n      setObservable(client.subscribe({\n        query: subscription,\n        variables: options?.variables,\n        fetchPolicy: options?.fetchPolicy,\n        context: options?.context,\n      }));\n    }\n\n    Object.assign(ref.current, { client, subscription, options });\n  }, [client, subscription, options]);\n\n  useEffect(() => {\n    if (!observable) {\n      return;\n    }\n\n    const subscription = observable.subscribe({\n      next(fetchResult) {\n        const result = {\n          loading: false,\n          // TODO: fetchResult.data can be null but SubscriptionResult.data\n          // expects TData | undefined only\n          data: fetchResult.data!,\n          error: void 0,\n          variables: options?.variables,\n        };\n        setResult(result);\n\n        ref.current.options?.onSubscriptionData?.({\n          client,\n          subscriptionData: result\n        });\n      },\n      error(error) {\n        setResult({\n          loading: false,\n          data: void 0,\n          error,\n          variables: options?.variables,\n        });\n      },\n      complete() {\n        ref.current.options?.onSubscriptionComplete?.();\n      },\n    });\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [observable]);\n\n  return result;\n}\n"],"names":["props","speed","width","height","viewBox","backgroundColor","foregroundColor","x","y","rx","ry","className","size","title","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","options","responsive","plugins","legend","position","display","text","titleChart","data","labels","datasets","label","dataValues","param","action","btnClass","onClick","ADD_VOTE","gql","PRINCIPAL_CHARACTERS_VOTES","GET_CHARACTER","CHANGE_VOTES_LISTENER","CHANGE_VOTE_LISTENER","t","useTranslation","useState","characters","setCharacters","useQuery","loading","error","votes","useMutation","update","__","mutationResult","console","log","addVote","useSubscription","useEffect","values","map","character","push","voteCharacter","characterId","variables","name","id","index","href","target","rel","to","mutation","client","called","result","setResult","ref","useRef","mutationId","isMounted","Object","assign","current","execute","useCallback","executeOptions","baseOptions","ignoreResults","clientOptions","mutate","then","response","errors","length","graphQLErrors","onCompleted","catch","onError","reset","subscription","skip","subscribe","query","fetchPolicy","context","observable","setObservable","shouldResubscribe","next","fetchResult","onSubscriptionData","subscriptionData","complete","onSubscriptionComplete","unsubscribe"],"sourceRoot":""}