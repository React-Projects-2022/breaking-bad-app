{"version":3,"file":"static/js/213.5aa17f88.chunk.js","mappings":"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","sources":["helpers/paths.js","core/Footer.js","hooks/useFetchApi.js","services/getFetchApi.js","components/Loading.js","components/PageTitle.js","pages/Episodes.js","core/Header.js","configs/chartjs.js","components/BarChart.js","components/Button.js","helpers/navigate.js","components/Card.js","pages/AllCharacters.js","graphql/operations/query.js","graphql/operations/subscription.js","graphql/operations/mutation.js","pages/PrincipalCharsVotes.js","pages/Details.js","pages/Home.js","core/Layout.js"],"sourcesContent":["export const PATHS = {\n  ALL_CHARACTERS: \"/breaking-bad-app/all-characters\",\n  DETAILS: \"/breaking-bad-app/details/:id\",\n  EPISODES: \"/breaking-bad-app/episodes\",\n  HOME: \"/breaking-bad-app\",\n  VOTES: \"/breaking-bad-app/votes\",\n};\n","import { useTranslation } from \"react-i18next\";\nimport \"./../styles/footer.css\";\nconst Footer = () => {\n  const { t, i18n } = useTranslation(\"languages\");\n  const selectLanguage = localStorage.getItem(\"language\") ? localStorage.getItem(\"language\") : 'en';\n  const changeLanguage = (code) => {\n    console.log(code);\n    localStorage.setItem(\"language\", code);\n    i18n.changeLanguage(code);\n  };\n  const englishText = t(\"english\");\n  return (\n    <div className=\"footer\">\n      <p>\n        Breaking Bad with React - Anartz Mugika Ledo -{\"  \"}\n        {new Date().getUTCFullYear()} {` /   ${t(\"label\")} `}\n        <button className={`langs-link ${selectLanguage === \"en\" ? \"active\" : \"en\"}`} onClick={() => changeLanguage('en')}>{englishText}</button>{\" \"}\n        <button className={`langs-link ${selectLanguage === \"es\"? \"active\" : \"es\"}`} onClick={() => changeLanguage('es')}>{t(\"spanish\")}</button>{\" \"}\n        <button className={`langs-link ${selectLanguage === \"eu\"? \"active\" : \"eu\"}`} onClick={() => changeLanguage('eu')}>{t('basque')}</button>\n      </p>\n    </div>\n  );\n};\nexport default Footer;\n","import { useEffect, useState, useRef } from \"react\";\nimport { fetchRestApi } from \"../services/getFetchApi\";\n\nexport const useFetchApi = (url) => {\n  const [state, setState] = useState({\n    data: null,\n    loading: true,\n    error: null,\n  });\n\n  const isMounted = useRef(true);\n\n  useEffect(() => {\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  useEffect(() => {\n    fetchRestApi(url).then((result) => {\n      if (isMounted.current) {\n        setState({\n          loading: false,\n          error: null,\n          data: result.data,\n        });\n      } else {\n        console.log(\"Ha dejado de renderizar\");\n      }\n    });\n  }, [url]);\n  return state;\n};\n","export const fetchRestApi = (url) => {\n  return fetch(url)\n    .then((resp) => resp.json())\n    .then((data) => {\n      return {\n        loading: false,\n        error: null,\n        data: data,\n      };\n    })\n    .catch((error) => {\n      return {\n        loading: false,\n        error,\n        data: [],\n      };\n    });\n};\n","import { Ring } from \"react-awesome-spinners\";\n\nconst Loading = () => (\n  <span className=\"loading\">\n    <Ring size={454} />\n  </span>\n);\n\nexport default Loading;\n","const PageTitle = ({ title }) => (\n  <>\n    <h2>{title}</h2>\n    <hr />\n  </>\n);\n\nexport default PageTitle;\n","import { useFetchApi } from \"./../hooks/useFetchApi\";\nimport { API_URL_BASE, API_ENDPOINTS } from \"./../helpers/urls\";\nimport Loading from \"../components/Loading\";\nimport PageTitle from \"../components/PageTitle\";\nimport { useTranslation } from \"react-i18next\";\nconst Episodes = () => {\n  const { t } = useTranslation(\"episodes\");\n  const { loading, data } = useFetchApi(\n    `${API_URL_BASE}${API_ENDPOINTS.EPISODES}`\n  );\n  const tableValues = [`season`, `episode`, `title_table`, `air_date`, `characters`];\n\n  return (\n    <>\n      <PageTitle title={t(\"title\")} />\n      {loading && <Loading />}\n      {!loading && (\n        <div className=\"table-responsive\">\n          <table className=\"table\">\n            <thead>\n              <tr>\n                {tableValues.map((value) => (\n                  <th key={value.toLowerCase()} className=\"text-center\">\n                    {t(value)}\n                  </th>\n                ))}\n              </tr>\n            </thead>\n\n            <tbody>\n              {data.map((episode, index) => (\n                <tr key={index}>\n                  <td>{episode.season}</td>\n                  <td>{episode.episode}</td>\n                  <td>{episode.title}</td>\n                  <td>{episode.air_date}</td>\n                  <td>{episode.characters.join(\", \")}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Episodes;\n","import { NavLink } from \"react-router-dom\";\nimport { PATHS } from \"./../helpers/paths\";\nimport { useTranslation } from \"react-i18next\";\nconst Header = () => {\n  const { t } = useTranslation(\"navbar\");\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark sticky-top\">\n      <div className=\"container-fluid\">\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-bs-toggle=\"collapse\"\n          data-bs-target=\"#navbarTogglerDemo01\"\n          aria-controls=\"navbarTogglerDemo01\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo01\">\n          <NavLink to={PATHS.HOME} className=\"navbar-brand\">\n            Breaking Bad\n          </NavLink>\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n            <li className=\"nav-item\">\n              <NavLink\n                to={PATHS.HOME}\n                className={({ isActive }) =>\n                  isActive ? \"nav-link active\" : \"nav-link\"\n                }\n              >\n                {t(\"home\")}\n              </NavLink>\n            </li>\n            <li className=\"nav-item\">\n              <NavLink\n                to={PATHS.ALL_CHARACTERS}\n                className={({ isActive }) =>\n                  isActive ? \"nav-link active\" : \"nav-link\"\n                }\n              >\n                {t(\"characters\")}\n              </NavLink>\n            </li>\n            <li className=\"nav-item\">\n              <NavLink\n                to={PATHS.EPISODES}\n                className={({ isActive }) =>\n                  isActive ? \"nav-link active\" : \"nav-link\"\n                }\n              >\n                {t(\"episodes\")}\n              </NavLink>\n            </li>\n\n            <li className=\"nav-item\">\n              <NavLink\n                to={PATHS.VOTES}\n                className={({ isActive }) =>\n                  isActive ? \"nav-link active\" : \"nav-link\"\n                }\n              >\n                {t(\"votes\")}\n              </NavLink>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nexport default Header;\n","import {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend,\n  } from \"chart.js\";\n  \n  ChartJS.register(\n    CategoryScale,\n    LinearScale,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend\n  );\n\n  export default ChartJS;","import { Bar } from \"react-chartjs-2\";\n// Configuración de los elemmentos como tooltip. labels,...que usaremos en las gráficas\n// eslint-disable-next-line no-unused-vars\nimport ChartJS from \"./../configs/chartjs\";\n\nconst BarChart = ({ titleChart, labels, dataValues }) => {\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: \"top\",\n      },\n      title: {\n        display: true,\n        text: titleChart,\n      },\n    },\n  };\n\n  const data = {\n    labels,\n    datasets: [\n      {\n        label: \"Characters\",\n        data: dataValues,\n        backgroundColor: \"rgba(13, 202, 240, 1)\",\n      },\n    ],\n  };\n  return <Bar options={options} data={data} />;\n};\n\nexport default BarChart;\n","import \"./../styles/components.css\";\nimport PropTypes from \"prop-types\";\n\nconst Button = ({ label, param, action }) => {\n  return (\n    <>\n      <button className=\"btn btn-info btn-lg btn-block custom-button\"\n        onClick={() => action(param)}>\n        {label}\n      </button>\n    </>\n  );\n};\n\n// Para obligar pasar el argumento para el objeto\nButton.propTypes = {\n  label: PropTypes.string.isRequired,\n};\n\nexport default Button;\n","/**\n * Use to navigate to selec page and params\n * Reference cheatsheet\n * https://www.samanthaming.com/tidbits/86-window-location-cheatsheet/\n * @param {*} path \n * @param {*} params \n */\n export const navigateTo = (path, params) => {\n     if (params) {\n        window.location.href = window.location.origin.concat(`/breaking-bad-app/${path}/${params}`);\n        return;\n     }\n     window.location.href = window.location.origin.concat(`/breaking-bad-app/${path}`);\n   \n  };\n\nexport const openExternalURL = (url) => window.open(url, '_blank');","import PropTypes from \"prop-types\";\nimport { Button } from \".\";\nimport { openExternalURL } from \"../helpers/navigate\";\nconst Card = ({ character, useLabel = \"Más\" }) => {\n  const goToMoreDetails = (url) => openExternalURL(url);\n  return (\n    <div className=\"col\" key={character.char_id}>\n      <div className=\"card\">\n        <div className=\"image-section\">\n          <img\n            src={character.img}\n            className=\"card-img-top\"\n            alt={character.name}\n          />\n          <span className=\"bottom-left\">{character.portrayed}</span>\n        </div>\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">{character.name}</h5>\n          {\n            (character.char_id === undefined) ?\n            (\n              <>\n              <p className=\"card-text truncate\">{character.description}</p>\n              \n              <Button\n                key={`Wiki_${character.id}`}\n                label={useLabel}\n                param={character.url}\n                action={goToMoreDetails}\n              />\n              </>\n            ): (\n              <>\n              <p className=\"card-text\">{character.occupation.join(\", \")}</p>\n              <p className=\"card-text\">\n                <small className=\"text-muted\">\n                  {useLabel} {character.appearance.join(\", \")}\n                </small>\n              </p>\n              </>\n            )\n          }\n          \n        </div>\n      </div>\n    </div>\n  )\n};\n\n// Para obligar pasar el argumento para el objeto\nCard.propTypes = {\n  character: PropTypes.object.isRequired,\n};\nexport default Card;\n","import { useFetchApi } from \"../hooks/useFetchApi\";\nimport { API_URL_BASE, API_ENDPOINTS } from \"../helpers/urls\";\nimport Card from \"../components/Card\";\nimport Loading from \"../components/Loading\";\nimport PageTitle from \"../components/PageTitle\";\nimport { useTranslation } from \"react-i18next\";\nconst AllCharacters = () => {\n  const { t } = useTranslation(\"characters\");\n  const { loading, data } = useFetchApi(\n    `${API_URL_BASE}${API_ENDPOINTS.CHARACTERS}`\n  );\n  return (\n    <>\n      <PageTitle title={t(\"title\")} />\n      {loading && <Loading />}\n      {!loading && (\n        <div className=\"row row-cols-1 row-cols-md-3 g-4\">\n          {data.map((character, index) => (\n            <Card character={character} useLabel={t(\"appearance_seasons\")} key={index} />\n          ))}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default AllCharacters;\n","import { gql } from \"@apollo/client\";\n\nexport const PRINCIPAL_CHARACTERS_VOTES = gql`\n  query PrincipalCharsVotes {\n    characters {\n      id\n      name\n      description\n      portrayed: actor\n      total_episodes\n      votes\n      url\n      img: photo\n    }\n  }\n`;\n\nexport const GET_CHARACTER = gql`\n  query detailsCharacter($id: ID!){\n    character(id: $id) {\n      id\n      total_episodes\n      votes\n      name\n      actor\n      description\n      photo\n      url\n    }\n  }\n`;\n","import { gql } from \"@apollo/client\";\n\nexport const CHANGE_VOTES_LISTENER = gql`\n  subscription {\n    changeVotes {\n      id\n      name\n      votes\n    }\n  }\n`;\n\n\nexport const CHANGE_VOTE_LISTENER = gql`\n    subscription characterVoteCount($id: ID!) {\n        changeVote(id: $id) {\n            id\n            name\n            votes\n        }\n    }\n`;","import { gql } from \"@apollo/client\";\n\nexport const ADD_VOTE = gql`\n  mutation Mutation($character: ID!) {\n    addVote(character: $character) {\n      status\n      message\n    }\n  }\n`;\n","import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useSubscription } from \"@apollo/client\";\n\nimport { Loading, BarChart, Button, PageTitle } from \"../components/\";\n// GraphQL Operations\nimport { PRINCIPAL_CHARACTERS_VOTES } from \"../graphql/operations/query\";\nimport { CHANGE_VOTES_LISTENER } from \"../graphql/operations/subscription\";\nimport { ADD_VOTE } from \"../graphql/operations/mutation\";\nimport { NavLink } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nconst PrincipalCharsVotes = () => {\n  const { t } = useTranslation(\"votes\");\n  const [characters, setCharacters] = useState([]);\n  const { loading, error, data: votes } = useQuery(PRINCIPAL_CHARACTERS_VOTES);\n  const [addVote] = useMutation(ADD_VOTE, {\n    update: (__, mutationResult) => {\n      console.log(mutationResult.data);\n    },\n  });\n  useSubscription(CHANGE_VOTES_LISTENER); //executes query\n\n  useEffect(() => {\n    if (votes) {\n      setCharacters(votes.characters);\n    }\n  }, [votes]);\n\n  if (loading) return <Loading />;\n  if (error) return <p>Error :(</p>;\n\n  let labels = [];\n  let values = [];\n  if (!loading) {\n    characters.map((character) => {\n      labels.push(character[\"name\"]);\n      values.push(character[\"votes\"]);\n      return \"\";\n    });\n  }\n\n  const voteCharacter = (characterId) =>\n    addVote({\n      variables: {\n        character: characterId,\n      },\n    });\n\n  //const showDetails = (characterId) => navigateTo(\"details\", characterId);\n\n  const tableValues = [\n    `name`,\n    `actor`,\n    `info`,\n    `total_episodes`,\n    `votes`,\n    `details`,\n  ];\n\n  return (\n    <>\n      <PageTitle title={t(\"title\")} />\n      {!loading && (\n        <>\n          <div className=\"row\">\n            <div className=\"col-9\">\n              <BarChart\n                titleChart={t(\"vote_count_for_chart\")}\n                labels={labels}\n                dataValues={values}\n              />\n            </div>\n            <div className=\"col d-grid gap-2\">\n              {characters.map((character) => (\n                <Button\n                  key={character.id}\n                  label={character.name}\n                  param={character.id}\n                  action={voteCharacter}\n                />\n              ))}\n            </div>\n          </div>\n          <br />\n          <br />\n          <div className=\"row\">\n            <div className=\"table-responsive\">\n              <table className=\"table\">\n                <thead>\n                  <tr>\n                    {tableValues.map((values, index) => (\n                      <th className=\"text-center\" key={index}>\n                        {t(values)}\n                      </th>\n                    ))}\n                  </tr>\n                </thead>\n\n                <tbody>\n                  {characters.map((character) => (\n                    <tr key={character.id}>\n                      <td>{character[\"name\"]}</td>\n                      <td>{character[\"portrayed\"]}</td>\n                      <td>\n                        <a\n                          href={character[\"url\"]}\n                          target=\"_blank\"\n                          rel=\"noreferrer\"\n                        >\n                          Wikipedia\n                        </a>\n                      </td>\n                      <td>{character[\"total_episodes\"]}</td>\n                      <td>{character[\"votes\"]}</td>\n                      <td>\n                        <NavLink\n                          to={`/breaking-bad-app/details/${character.id}`}\n                          className=\"btn btn-info btn-lg btn-block custom-button\"\n                        >\n                          {t(`details`)}\n                        </NavLink>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default PrincipalCharsVotes;\n","import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { useQuery, useMutation, useSubscription } from \"@apollo/client\";\nimport { GET_CHARACTER } from \"../graphql/operations/query\";\nimport { ADD_VOTE } from \"../graphql/operations/mutation\";\nimport { CHANGE_VOTE_LISTENER } from \"../graphql/operations/subscription\";\nimport { Loading, PageTitle, Button } from \"../components\";\nimport { openExternalURL } from \"../helpers/navigate\";\nconst Details = () => {\n  const { t } = useTranslation();\n  const [idProduct] = useState(useParams().id);\n  const [character, setCharacter] = useState({});\n  const { loading, error, data } = useQuery(GET_CHARACTER, {\n    variables: {\n      id: idProduct,\n    },\n  });\n  const [addVote] = useMutation(ADD_VOTE, {\n    update: (__, mutationResult) => {\n      console.log(mutationResult.data);\n    },\n  });\n  useSubscription(CHANGE_VOTE_LISTENER, {\n    variables: {\n      id: idProduct,\n    },\n  });\n\n  useEffect(() => {\n    if (data) {\n      setCharacter(data.character);\n    }\n  }, [data]);\n\n  const voteCharacter = (characterId) =>\n    addVote({\n      variables: {\n        character: characterId,\n      },\n    });\n\n  const goToMoreDetails = (url) => openExternalURL(url);\n\n  if (loading) return <Loading />;\n  if (error) return <p>Error :(</p>;\n  return (\n    <>\n      {character && (\n        <>\n          <PageTitle title={character.name} />\n          <div className=\"row\">\n            <div className=\"col-md-5\">\n              <img\n                className=\"img-fluid\"\n                src={character.photo}\n                alt={`${character.name} profile`}\n              />\n            </div>\n            <div className=\"col-lg\">\n              <h5 className=\"my-3\">{character.votes} {t(\"pages.details.votes\")}</h5>\n              <p>{character.description}</p>\n              <Button\n                key={character.id}\n                label={`${t(\"pages.details.vote_lbl\")} ${character.name}`}\n                param={character.id}\n                action={voteCharacter}\n              />\n              &nbsp;\n              <Button\n                key={`Wiki_${character.id}`}\n                label={t(\"pages.details.more_info\")}\n                param={character.url}\n                action={goToMoreDetails}\n              />\n            </div>\n          </div>\n        </>\n      )}\n    </>\n  );\n};\nexport default Details;","import { useQuery } from \"@apollo/client\";\nimport Card from \"../components/Card\";\nimport Loading from \"../components/Loading\";\nimport PageTitle from \"../components/PageTitle\";\nimport { PRINCIPAL_CHARACTERS_VOTES } from \"../graphql/operations/query\";\nimport \"./../configs/i18n\";\nimport { useTranslation } from \"react-i18next\";\n// import { useSetLanguage } from \"../hooks/useSetLanguage\";\nconst Home = () => {\n  const { t } = useTranslation(\"home\");\n  const { loading, error, data } = useQuery(PRINCIPAL_CHARACTERS_VOTES);\n  // const {lang } = useSetLanguage();\n  const characters = !!data && data.characters;\n  if (error) return <p>Error :(</p>;\n\n  return (\n    <>\n      {loading && <Loading />}\n      {!loading && (\n        <>\n          <PageTitle title={t(\"title\")} />\n          <div className=\"row row-cols-1 row-cols-md-3 g-4\">\n            {characters.map((character, index) => (\n              <Card character={character} useLabel={t(\"more_info\")} key={index} />\n            ))}\n          </div>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Home;\n","import { Routes, Route } from \"react-router-dom\";\nimport { PATHS } from \"./../helpers/paths\";\nimport Footer from \"./Footer\";\nimport Episodes from \"./../pages/Episodes\";\nimport Header from \"./Header\";\nimport AllCharacters from \"../pages/AllCharacters\";\nimport PrincipalCharsVotes from \"../pages/PrincipalCharsVotes\";\nimport Details from \"../pages/Details\";\nimport Home from \"../pages/Home\";\n\n// https://benestudio.co/how-to-lazy-load-your-react-components/\nconst Layout = () => {\n  return (\n    <>\n      <Header />\n      <div className=\"container-md\">\n        <Routes>\n          <Route path={PATHS.HOME} element={<Home />} />\n          <Route path={PATHS.ALL_CHARACTERS} element={<AllCharacters />} />\n          <Route path={PATHS.EPISODES} element={<Episodes />} />\n          <Route path={PATHS.DETAILS} element={<Details />} />\n          <Route path={PATHS.VOTES} element={<PrincipalCharsVotes />} />\n        </Routes>\n      </div>\n      <Footer />\n    </>\n  );\n};\n\nexport default Layout;\n"],"names":["PATHS","useTranslation","t","i18n","selectLanguage","localStorage","getItem","changeLanguage","code","console","log","setItem","englishText","className","Date","getUTCFullYear","onClick","useFetchApi","url","useState","data","loading","error","state","setState","isMounted","useRef","useEffect","current","fetch","then","resp","json","catch","fetchRestApi","result","size","title","API_URL_BASE","API_ENDPOINTS","map","value","toLowerCase","episode","index","season","air_date","characters","join","type","id","to","isActive","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","options","responsive","plugins","legend","position","display","text","titleChart","labels","datasets","label","dataValues","backgroundColor","param","action","openExternalURL","window","open","character","useLabel","src","img","alt","name","portrayed","undefined","char_id","description","occupation","appearance","PRINCIPAL_CHARACTERS_VOTES","gql","GET_CHARACTER","CHANGE_VOTES_LISTENER","CHANGE_VOTE_LISTENER","ADD_VOTE","setCharacters","useQuery","votes","useMutation","update","__","mutationResult","addVote","useSubscription","values","push","voteCharacter","characterId","variables","href","target","rel","useParams","idProduct","setCharacter","photo","path","element"],"sourceRoot":""}